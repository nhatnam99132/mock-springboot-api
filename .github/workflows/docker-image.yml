name: Docker Image CI

on:
  push:
    branches:
      - develop  # Run on push to develop branch (for dev environment)
      - main     # Run on push to main branch (for prod environment)
  pull_request:
    branches:
      - develop  # Run on pull requests targeting the develop branch (for dev environment)
      - main     # Run on pull requests targeting the main branch (for prod environment

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    # Dynamically set the environment based on the branch (develop or main)
    environment: ${{ github.ref == 'refs/heads/develop' && 'dev' || 'prod' }} 

    steps:
    - uses: actions/checkout@v4
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ vars.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build the Docker image
      run: |
        SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
        docker build . --file Dockerfile --tag ${{ vars.DOCKERHUB_REPO }}:$SHORT_SHA
        docker build . --file Dockerfile --tag ${{ vars.DOCKERHUB_REPO }}:latest

    - name: Push the Docker image to Docker Hub
      run: |
        SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
        docker push ${{ vars.DOCKERHUB_REPO }}:$SHORT_SHA
        docker push ${{ vars.DOCKERHUB_REPO }}:latest
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/develop' && 'dev' || 'prod' }}

    steps:
    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        role-to-assume: ${{ secrets.ROLE_ARN }}

    - name: Retrieve the current task definition
      run: |
        aws s3 cp ${{ vars.ECS_TASK_DEFINITION }}task-definition.json .
        cat task-definition.json

    - name: Update task definition with new image tag
      run: |
        # Extract SHORT_SHA for tagging
        SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
        echo "SHORT_SHA: $SHORT_SHA"

        # Replace the current image tag with SHORT_SHA
        jq --arg TAG "$SHORT_SHA" \
        '.containerDefinitions[0].image |= sub(":[^:]+$"; ":" + $TAG)' \
        task-definition.json > updated-task-definition.json

        echo "Updated task definition:"
        cat updated-task-definition.json

    - name: Register the updated task definition
      run: |
        NEW_TASK_DEF=$(aws ecs register-task-definition --cli-input-json file://task-definition.json --query "taskDefinition.taskDefinitionArn" --output text)
        echo "New task definition registered: $NEW_TASK_DEF"
        aws s3 cp updated-task-definition.json ${{ vars.ECS_TASK_DEFINITION }}

    - name: Update ECS Service
      run: |
        echo $NEW_TASK_DEF

        aws ecs update-service --cluster ${{ vars.ECS_CLUSTER_NAME }} --service ${{ vars.ECS_SERVICE_NAME }} --force-new-deployment

        echo "Service updated with new task definition."
